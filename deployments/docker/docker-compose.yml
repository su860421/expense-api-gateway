version: '3.8'

services:
  # API Gateway
  api-gateway:
    build: .
    container_name: expense-api-gateway
    ports:
      - "8080:8080"
      - "9090:9090"
    environment:
      - SERVER_PORT=8080
      - SERVER_MODE=development
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - DATABASE_HOST=postgres
      - DATABASE_PORT=5432
      - DATABASE_USERNAME=postgres
      - DATABASE_PASSWORD=password
      - DATABASE_DATABASE=gateway_db
    depends_on:
      - redis
      - postgres
    restart: unless-stopped
    networks:
      - gateway-network
    volumes:
      - ./configs:/app/configs:ro
      - gateway-logs:/var/log/gateway

  # Redis 快取服務
  redis:
    image: redis:7-alpine
    container_name: gateway-redis
    ports:
      - "6379:6379"
    restart: unless-stopped
    networks:
      - gateway-network
    volumes:
      - redis-data:/data
    command: redis-server --appendonly yes

  # PostgreSQL 數據庫
  postgres:
    image: postgres:15-alpine
    container_name: gateway-postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=gateway_db
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
    restart: unless-stopped
    networks:
      - gateway-network
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./scripts/init.sql:/docker-entrypoint-initdb.d/init.sql:ro

  # Prometheus 監控
  prometheus:
    image: prom/prometheus:latest
    container_name: gateway-prometheus
    ports:
      - "9091:9090"
    restart: unless-stopped
    networks:
      - gateway-network
    volumes:
      - ./docker/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'

  # Grafana 可視化
  grafana:
    image: grafana/grafana:latest
    container_name: gateway-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    restart: unless-stopped
    networks:
      - gateway-network
    volumes:
      - grafana-data:/var/lib/grafana
      - ./docker/grafana:/etc/grafana/provisioning:ro

  # 模擬微服務 - User Service
  user-service:
    image: nginx:alpine
    container_name: user-service
    ports:
      - "8001:80"
    restart: unless-stopped
    networks:
      - gateway-network
    volumes:
      - ./docker/nginx/user-service.conf:/etc/nginx/conf.d/default.conf:ro
      - ./docker/nginx/html/user:/usr/share/nginx/html:ro

  # 模擬微服務 - Order Service
  order-service:
    image: nginx:alpine
    container_name: order-service
    ports:
      - "8003:80"
    restart: unless-stopped
    networks:
      - gateway-network
    volumes:
      - ./docker/nginx/order-service.conf:/etc/nginx/conf.d/default.conf:ro
      - ./docker/nginx/html/order:/usr/share/nginx/html:ro

  # 模擬微服務 - Payment Service
  payment-service:
    image: nginx:alpine
    container_name: payment-service
    ports:
      - "8005:80"
    restart: unless-stopped
    networks:
      - gateway-network
    volumes:
      - ./docker/nginx/payment-service.conf:/etc/nginx/conf.d/default.conf:ro
      - ./docker/nginx/html/payment:/usr/share/nginx/html:ro

networks:
  gateway-network:
    driver: bridge

volumes:
  redis-data:
  postgres-data:
  prometheus-data:
  grafana-data:
  gateway-logs:
